{"version":3,"sources":["pages/Post/Post.js","static/functions.js"],"names":["Post","useEffect","document","title","post","hashClass","window","location","hash","split","element","querySelector","setTimeout","scrollTo","behavior","top","offsetTop","addClass","slug","useParams","findPostBySlug","posts","className","ReactHtmlParser","content","to","link_back","name","toLowerCase","querySelectorAll","selector","classList","add","removeClass","remove","toggleClass","toggle","ifStringContArr","string","arr","some","item","includes","removeElem","elem","filter","useTimeout","callback","delay","timeoutRef","useRef","callbackRef","current","clearTimeout","useViewport","useState","innerWidth","width","setWidth","innerHeight","height","setHeight","handleWindowResize","addEventListener","removeEventListener","getRandom","numb","Math","floor","random","find"],"mappings":"2HAAA,0FAsCeA,UA3BF,WACTC,qBAAU,WACNC,SAASC,MAAQC,EAAKD,MAEtB,IAAME,EAAYC,OAAOC,SAASC,KAAKC,MAAM,IAAK,GAAG,GAC/CC,EAAUC,YAAcN,GAE9BO,YAAW,WACNF,GAAWJ,OAAOO,SAAS,CACxBC,SAAU,SACVC,IAAKL,EAAQM,YAEjBC,YAASP,EAAS,uBACnB,OACJ,IAdY,IAgBPQ,EAASC,cAATD,KACFd,EAAOgB,YAAeC,IAAOH,GACpC,OAAQ,0BAAMI,UAAU,QACX,6BAASA,UAAU,iBACf,wBAAIA,UAAU,eAAelB,EAAKD,OAClC,yBAAKmB,UAAU,cAAcC,IAAgBnB,EAAKoB,WAEtD,kBAAC,IAAD,CAAMF,UAAU,uBAAuBG,GAAG,KAAKD,IAAQE,c,yaChCjEf,EAAgB,SAAAgB,GAAI,OACzBzB,SAASS,cAAT,kBAA2BgB,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAMC,iBAE5BC,EAAmB,SAAAF,GAAI,OAC5BzB,SAAS2B,iBAAT,WAA8BF,KAEzBV,EAAW,SAACa,EAAUR,GAAX,cAChBQ,QADgB,IAChBA,OADgB,EAChBA,EAAUC,UAAUC,IAAIV,IAEnBW,EAAc,SAACH,EAAUR,GAAX,cACnBQ,QADmB,IACnBA,OADmB,EACnBA,EAAUC,UAAUG,OAAOZ,IAEtBa,EAAc,SAACL,EAAUR,GAAX,cACnBQ,QADmB,IACnBA,OADmB,EACnBA,EAAUC,UAAUK,OAAOd,IAEtBe,EAAkB,SAACC,EAAQC,GAAT,OACvBA,EAAIC,MAAK,SAAAC,GAAI,OAAIH,EAAOV,cAAcc,SAASD,OAE1CE,EAAa,SAACJ,EAAKK,GAAN,OACZL,EAAIM,QAAO,SAAAJ,GAAI,OAAIA,IAASG,MAoB7BE,EAAa,SAACC,EAAUC,GAC7B,IAAMC,EAAaC,mBACbC,EAAcD,iBAAOH,GAe3B,OAbA9C,qBAAU,WACTkD,EAAYC,QAAUL,IACpB,CAACA,IAEJ9C,qBAAU,WACT,GAAqB,kBAAV+C,EAIV,OAHAC,EAAWG,QAAU9C,OAAOM,YAAW,kBACvCuC,EAAYC,YAAWJ,GAEhB,kBAAM1C,OAAO+C,aAAaJ,EAAWG,YAE3C,CAACJ,IAEGC,GAGFK,EAAc,WAAO,IAAD,EACCC,mBAASjD,OAAOkD,YADjB,mBAClBC,EADkB,KACXC,EADW,OAGGH,mBAASjD,OAAOqD,aAHnB,mBAGlBC,EAHkB,KAGVC,EAHU,KAiBzB,OAZA5D,qBAAU,WACT,IAAM6D,EAAqB,WAC1BJ,EAASpD,OAAOkD,YAEhBK,EAAUvD,OAAOqD,cAIlB,OADArD,OAAOyD,iBAAiB,SAAUD,GAC3B,kBAAMxD,OAAO0D,oBAAoB,SAAUF,MAChD,IAGI,CAAEL,QAAOG,WAGXK,EAAY,SAACC,GAAD,OACjBC,KAAKC,MAAMD,KAAKE,SAAWH,GAAQ,GAE9B9C,EAAiB,SAACC,EAAOH,GAAR,OACnBG,EAAMiD,MAAK,SAAA7B,GAAI,OAAIA,EAAKvB,OAASA,O","file":"static/js/10.efceae57.chunk.js","sourcesContent":["import React, { useEffect } from \"react\"\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport { useParams } from \"react-router\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport posts from '../../static/posts'\r\nimport content from '../../static/content'\r\nimport { querySelector, findPostBySlug, addClass } from '../../static/functions'\r\n\r\nimport './Post.css'\r\n\r\nconst Post = () => {\r\n    useEffect(() => {\r\n        document.title = post.title\r\n\r\n        const hashClass = window.location.hash.split(\"#\", 3)[2]\r\n        const element = querySelector(hashClass)\r\n\r\n        setTimeout(() => {\r\n            (element && window.scrollTo({\r\n                behavior: \"smooth\",\r\n                top: element.offsetTop\r\n            }))\r\n            addClass(element, 'post__text-active')\r\n        }, 100)\r\n    }, [])\r\n\r\n    const { slug } = useParams()\r\n    const post = findPostBySlug(posts, slug)\r\n  \treturn \t<main className=\"post\">\r\n                <article className=\"post__article\">\r\n                    <h1 className=\"post__title\">{post.title}</h1>\r\n                    <div className=\"post__text\">{ReactHtmlParser(post.content)}</div>\r\n                </article>\r\n                <Link className=\"post__back link_back\" to='/'>{content.link_back}</Link>\r\n\t\t    </main>\r\n}\r\n\r\nexport default Post\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nconst querySelector = name =>\r\n\tdocument.querySelector(`.${name?.toLowerCase()}`)\r\n\r\nconst querySelectorAll = name =>\r\n\tdocument.querySelectorAll(`.${name}`)\r\n\r\nconst addClass = (selector, className) =>\r\n\tselector?.classList.add(className)\r\n\r\nconst removeClass = (selector, className) =>\r\n\tselector?.classList.remove(className)\r\n\r\nconst toggleClass = (selector, className) =>\r\n\tselector?.classList.toggle(className)\r\n\r\nconst ifStringContArr = (string, arr) =>\r\n\tarr.some(item => string.toLowerCase().includes(item))\r\n\r\nconst removeElem = (arr, elem) =>\r\n\tarr = arr.filter(item => item !== elem)\r\n\r\nconst useInterval = (callback, delay) => {\r\n\tconst savedCallback = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = callback\r\n\t}, [callback])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst tick = () => {\r\n\t\t\tsavedCallback.current()\r\n\t\t}\r\n\t\tif (delay !== null) {\r\n\t\t\tconst id = setInterval(tick, delay)\r\n\t\t\treturn () => clearInterval(id)\r\n\t\t}\r\n\t}, [delay])\r\n}\r\n\r\nconst useTimeout = (callback, delay) => {\r\n\tconst timeoutRef = useRef()\r\n\tconst callbackRef = useRef(callback)\r\n\r\n\tuseEffect(() => {\r\n\t\tcallbackRef.current = callback\r\n\t}, [callback])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (typeof delay === 'number') {\r\n\t\t\ttimeoutRef.current = window.setTimeout(() =>\r\n\t\t\tcallbackRef.current(), delay)\r\n\r\n\t\t\treturn () => window.clearTimeout(timeoutRef.current)\r\n\t\t}\r\n\t}, [delay])\r\n\r\n\treturn timeoutRef\r\n}\r\n\r\nconst useViewport = () => {\r\n\tconst [width, setWidth] = useState(window.innerWidth)\r\n\t// Add a second state variable \"height\" and default it to the current window height\r\n\tconst [height, setHeight] = useState(window.innerHeight)\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleWindowResize = () => {\r\n\t\t\tsetWidth(window.innerWidth)\r\n\t\t\t// Set the height in state as well as the width\r\n\t\t\tsetHeight(window.innerHeight)\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"resize\", handleWindowResize)\r\n\t\treturn () => window.removeEventListener(\"resize\", handleWindowResize)\r\n\t}, [])\r\n\r\n\t// Return both the height and width\r\n\treturn { width, height }\r\n}\r\n\r\nconst getRandom = (numb) =>\r\n\tMath.floor(Math.random() * numb) + 1\r\n\r\nconst findPostBySlug = (posts, slug) =>\r\n    posts.find(item => item.slug === slug)\r\n\r\nexport {\r\n\tquerySelector,\r\n\taddClass,\r\n\tremoveClass,\r\n\tifStringContArr,\r\n\tquerySelectorAll,\r\n\ttoggleClass,\r\n\tremoveElem,\r\n\tuseInterval,\r\n\tuseTimeout,\r\n\tuseViewport,\r\n\tgetRandom,\r\n\tfindPostBySlug,\r\n}\r\n"],"sourceRoot":""}